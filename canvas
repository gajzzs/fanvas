#!/usr/bin/env bash

## Canvas - An ImageMagick Script To Generate Wallpapers (Fedora Edition)
## Original Author: Aditya Shakya (adi1090x)
## Refactored for Fedora

set -euo pipefail

## ANSI Colors
declare -A COLORS=(
    [RED]=$'\033[31m'
    [GREEN]=$'\033[32m'
    [ORANGE]=$'\033[33m'
    [BLUE]=$'\033[34m'
    [MAGENTA]=$'\033[35m'
    [CYAN]=$'\033[36m'
    [WHITE]=$'\033[37m'
    [RESET]=$'\033[0m'
)

## Configuration
readonly DIR="${XDG_PICTURES_DIR:-$HOME/Pictures}/Canvas"
readonly DEFAULT_SIZE="1920x1080"
readonly PREVIEW_SIZE="600x338"

## Global variables
SIZE="$DEFAULT_SIZE"
NAME="Canvas_$(date +%Y-%m-%d_%H-%M-%S).png"
SOLID=false
GRADIENT=false
RGRADIENT=false
TGRADIENT=false
BGRADIENT=false
PLASMA=false
NOISE=false
AUTOBG=false
RANDOMIZE=false
NOFEH=false
COLOR_ARG=""

## Signal handlers
trap 'echo -e "\n${COLORS[RED]}[!] Program interrupted.${COLORS[RESET]}"; exit 130' SIGINT
trap 'echo -e "\n${COLORS[RED]}[!] Program terminated.${COLORS[RESET]}"; exit 143' SIGTERM

## Check dependencies
check_prerequisites() {
    local deps=(convert feh)
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        echo -e "${COLORS[RED]}ERROR: Missing dependencies: ${missing[*]}${COLORS[RESET]}" >&2
        echo -e "${COLORS[ORANGE]}Install with: sudo dnf install ImageMagick feh${COLORS[RESET]}" >&2
        exit 1
    fi
    
    # Check for color picker (optional)
    if ! command -v gcolor3 &>/dev/null && ! command -v gpick &>/dev/null && ! command -v zenity &>/dev/null; then
        echo -e "${COLORS[ORANGE]}Warning: No color picker found. Install gcolor3, gpick, or zenity for interactive color selection.${COLORS[RESET]}" >&2
        echo -e "${COLORS[ORANGE]}Install with: sudo dnf install gcolor3${COLORS[RESET]}" >&2
    fi
    
    mkdir -p "$DIR"
}

## Usage information
usage() {
    cat <<-EOF
	${COLORS[RED]}┏━╸${COLORS[GREEN]}┏━┓${COLORS[ORANGE]}┏┓╻${COLORS[BLUE]}╻ ╻${COLORS[MAGENTA]}┏━┓${COLORS[CYAN]}┏━┓${COLORS[RESET]}
	${COLORS[RED]}┃  ${COLORS[GREEN]}┣━┫${COLORS[ORANGE]}┃┗┫${COLORS[BLUE]}┃┏┛${COLORS[MAGENTA]}┣━┫${COLORS[CYAN]}┗━┓${COLORS[RESET]}
	${COLORS[RED]}┗━╸${COLORS[GREEN]}╹ ╹${COLORS[ORANGE]}╹ ╹${COLORS[BLUE]}┗┛ ${COLORS[MAGENTA]}╹ ╹${COLORS[CYAN]}┗━┛${COLORS[RESET]}
	
	Canvas V4.0 (Fedora Edition) - Wallpaper Generator
	
	Usage: canvas [OPTIONS]
	
	Options:
	  -h, --help          Show this help message
	  -S, --size WxH      Wallpaper size (default: 1920x1080)
	  -s, --solid         Generate solid color wallpaper
	  -l, --linear        Generate linear gradient wallpaper
	  -r, --radial        Generate radial gradient wallpaper
	  -t, --twisted       Generate twisted gradient wallpaper
	  -b, --bilinear      Generate bilinear (4-point) gradient wallpaper
	  -p, --plasma        Generate plasma wallpaper
	  -B, --blurred       Generate random blurred wallpaper
	  -n, --no-preview    Skip preview window
	  -a, --autobg        Auto-set as wallpaper (implies -n)
	  -R, --randomize     Generate random wallpaper
	  -c, --colors COLORS Specify colors directly (see examples)
	
	Examples:
	  canvas -s -c "#FF5733"                    # Solid color
	  canvas -l -c "#FF5733-#3498DB" -a         # Linear gradient, auto-set
	  canvas -r -c "red-blue"                   # Radial with color names
	  canvas -t -c "#E74C3C-#8E44AD"            # Twisted gradient
	  canvas -b -c "#FF0000,#00FF00,#0000FF,#FFFF00"  # 4 colors for bilinear
	  canvas -p -c "#FF6B6B-#4ECDC4"            # Plasma with colors
	  canvas -R                                 # Random wallpaper
	  canvas -S 2560x1440 -l -c "orange-purple" # Custom size
	
	EOF
}

## Detect desktop environment and set wallpaper
set_wallpaper() {
    local file="$DIR/$NAME"
    
    case "${XDG_CURRENT_DESKTOP:-unknown}" in
        *GNOME*|*gnome*|*ubuntu*)
            gsettings set org.gnome.desktop.background picture-uri "file://$file"
            gsettings set org.gnome.desktop.background picture-uri-dark "file://$file"
            ;;
        *KDE*|*kde*|*plasma*)
            qdbus org.kde.plasmashell /PlasmaShell org.kde.PlasmaShell.evaluateScript "
                var allDesktops = desktops();
                for (i=0; i<allDesktops.length; i++) {
                    d = allDesktops[i];
                    d.wallpaperPlugin = 'org.kde.image';
                    d.currentConfigGroup = Array('Wallpaper', 'org.kde.image', 'General');
                    d.writeConfig('Image', 'file://$file')
                }"
            ;;
        *XFCE*|*xfce*)
            xfconf-query --channel xfce4-desktop \
                --property /backdrop/screen0/monitoreDP1/workspace0/last-image \
                --set "$file" 2>/dev/null || \
            xfconf-query --channel xfce4-desktop \
                --property /backdrop/screen0/monitor0/workspace0/last-image \
                --set "$file"
            ;;
        *Cinnamon*|*cinnamon*)
            gsettings set org.cinnamon.desktop.background picture-uri "file://$file"
            ;;
        *MATE*|*mate*)
            gsettings set org.mate.background picture-filename "$file"
            ;;
        *)
            if [[ "$XDG_SESSION_TYPE" == "wayland" ]]; then
                if command -v swaymsg &>/dev/null; then
                    swaymsg output '*' bg "$file" fill
                else
                    echo -e "${COLORS[ORANGE]}Wayland detected but no supported compositor found${COLORS[RESET]}"
                    return 1
                fi
            else
                feh --bg-fill "$file"
            fi
            ;;
    esac
    
    echo -e "${COLORS[GREEN]}✓ Wallpaper set successfully${COLORS[RESET]}"
}

## Show preview
show_preview() {
    if [[ "$NOFEH" != true ]] && [[ "$AUTOBG" != true ]]; then
        feh --borderless --scale-down --geometry="$PREVIEW_SIZE" \
            --title="Canvas Preview: $NAME" "$DIR/$NAME" &>/dev/null &
    fi
}

## Prompt to set wallpaper
prompt_set_wallpaper() {
    if [[ "$AUTOBG" == true ]]; then
        set_wallpaper
        return
    fi
    
    echo
    read -rp "${COLORS[ORANGE]}Set as desktop background? (y/n): ${COLORS[BLUE]}" reply
    echo -e "${COLORS[RESET]}"
    
    if [[ $reply =~ ^[Yy]$ ]]; then
        set_wallpaper
    fi
}

## Get color using available picker
pick_color() {
    # Try gcolor3 first (most common in Fedora)
    if command -v gcolor3 &>/dev/null; then
        gcolor3 2>/dev/null &
        local pid=$!
        wait $pid 2>/dev/null
        # gcolor3 copies to clipboard, try to get it
        if command -v xclip &>/dev/null; then
            xclip -selection clipboard -o 2>/dev/null || echo "#$(printf '%06X' $((RANDOM * RANDOM % 16777216)))"
        else
            echo "#$(printf '%06X' $((RANDOM * RANDOM % 16777216)))"
        fi
    # Try gpick
    elif command -v gpick &>/dev/null; then
        gpick -pso --single 2>/dev/null | grep -oP '#[0-9A-Fa-f]{6}' || echo "#$(printf '%06X' $((RANDOM * RANDOM % 16777216)))"
    # Fallback to zenity color selection
    elif command -v zenity &>/dev/null; then
        zenity --color-selection --show-palette 2>/dev/null | awk -F'[()]' '{print $2}' | {
            read rgb
            if [[ -n "$rgb" ]]; then
                # Convert rgb(r,g,b) to hex
                echo "$rgb" | awk -F'[,()]' '{printf "#%02X%02X%02X\n", $1, $2, $3}'
            else
                echo "#$(printf '%06X' $((RANDOM * RANDOM % 16777216)))"
            fi
        }
    else
        echo -e "${COLORS[RED]}No color picker available. Please install: sudo dnf install gcolor3${COLORS[RESET]}" >&2
        return 1
    fi
}

## Interactive color selection
get_colors() {
    # If colors were provided via command line, use them
    if [[ -n "$COLOR_ARG" ]]; then
        if [[ "$SOLID" == true ]]; then
            COLOR="$COLOR_ARG"
        elif [[ "$GRADIENT" == true ]] || [[ "$RGRADIENT" == true ]] || [[ "$TGRADIENT" == true ]]; then
            COLOR="$COLOR_ARG"
        elif [[ "$BGRADIENT" == true ]]; then
            IFS=',' read -r COLOR1 COLOR2 COLOR3 COLOR4 <<< "$COLOR_ARG"
        fi
        return
    fi
    
    local method
    
    echo
    read -rp "${COLORS[ORANGE]}Color method? [(p)ick/(e)nter]: ${COLORS[BLUE]}" method
    echo -e "${COLORS[RESET]}"
    
    case "$method" in
        p|P)
            if [[ "$SOLID" == true ]]; then
                echo -n "${COLORS[ORANGE]}Pick a color... ${COLORS[RESET]}"
                COLOR=$(pick_color)
                echo -e "${COLORS[GREEN]}Selected: $COLOR${COLORS[RESET]}"
            elif [[ "$GRADIENT" == true ]] || [[ "$RGRADIENT" == true ]] || [[ "$TGRADIENT" == true ]]; then
                echo -n "${COLORS[ORANGE]}Pick first color... ${COLORS[RESET]}"
                local color1=$(pick_color)
                echo -n "${COLORS[ORANGE]}Pick second color... ${COLORS[RESET]}"
                local color2=$(pick_color)
                COLOR="$color1-$color2"
                echo -e "${COLORS[GREEN]}Selected: $color1, $color2${COLORS[RESET]}"
            elif [[ "$BGRADIENT" == true ]]; then
                echo -n "${COLORS[ORANGE]}Pick 4 colors...${COLORS[RESET]}"
                COLOR1=$(pick_color)
                COLOR2=$(pick_color)
                COLOR3=$(pick_color)
                COLOR4=$(pick_color)
                echo -e "${COLORS[GREEN]}Selected 4 colors${COLORS[RESET]}"
            fi
            ;;
        *)
            if [[ "$SOLID" == true ]]; then
                read -rp "${COLORS[ORANGE]}Enter color (name or hex): ${COLORS[GREEN]}" COLOR
            elif [[ "$GRADIENT" == true ]] || [[ "$RGRADIENT" == true ]] || [[ "$TGRADIENT" == true ]]; then
                read -rp "${COLORS[ORANGE]}Enter colors (color1-color2): ${COLORS[GREEN]}" COLOR
            elif [[ "$BGRADIENT" == true ]]; then
                read -rp "${COLORS[ORANGE]}Color 1: ${COLORS[GREEN]}" COLOR1
                read -rp "${COLORS[ORANGE]}Color 2: ${COLORS[GREEN]}" COLOR2
                read -rp "${COLORS[ORANGE]}Color 3: ${COLORS[GREEN]}" COLOR3
                read -rp "${COLORS[ORANGE]}Color 4: ${COLORS[GREEN]}" COLOR4
            fi
            echo -e "${COLORS[RESET]}"
            ;;
    esac
}

## Generate random color
random_color() {
    printf '#%06X\n' $((RANDOM * RANDOM % 16777216))
}

## Generate random number in range
random_number() {
    echo $(( (RANDOM % $1) + 1 ))
}

## Wallpaper generators
generate_solid() {
    if [[ "$RANDOMIZE" == true ]]; then
        COLOR=$(random_color)
    else
        get_colors
    fi
    
    echo -e "${COLORS[CYAN]}Generating solid wallpaper...${COLORS[RESET]}"
    convert -size "$SIZE" canvas:"$COLOR" "$DIR/$NAME"
    show_preview
    prompt_set_wallpaper
}

generate_linear() {
    local angle
    
    if [[ "$RANDOMIZE" == true ]]; then
        COLOR="$(random_color)-$(random_color)"
        angle=$(random_number 360)
    else
        get_colors
        read -rp "${COLORS[ORANGE]}Rotation angle (0-360, default 0): ${COLORS[BLUE]}" angle
        echo -e "${COLORS[RESET]}"
    fi
    
    echo -e "${COLORS[CYAN]}Generating linear gradient...${COLORS[RESET]}"
    convert -size "$SIZE" -define gradient:angle="${angle:-0}" \
        gradient:"$COLOR" "$DIR/$NAME"
    show_preview
    prompt_set_wallpaper
}

generate_radial() {
    local angle shape
    
    if [[ "$RANDOMIZE" == true ]]; then
        COLOR="$(random_color)-$(random_color)"
        angle=$(random_number 360)
        local shapes=(diagonal ellipse maximum minimum)
        shape="${shapes[$((RANDOM % 4))]}"
    else
        get_colors
        echo -e "${COLORS[ORANGE]}Shape: (1)diagonal (2)ellipse (3)maximum (4)minimum${COLORS[RESET]}"
        read -rp "${COLORS[BLUE]}Choice [1-4]: ${COLORS[RESET]}" choice
        case "$choice" in
            1) shape="diagonal" ;;
            2) shape="ellipse" ;;
            3) shape="maximum" ;;
            *) shape="maximum" ;;
        esac
        read -rp "${COLORS[ORANGE]}Rotation angle (default 0): ${COLORS[BLUE]}" angle
        echo -e "${COLORS[RESET]}"
    fi
    
    echo -e "${COLORS[CYAN]}Generating radial gradient...${COLORS[RESET]}"
    convert -size "$SIZE" -define gradient:extent="$shape" \
        -define gradient:angle="${angle:-0}" radial-gradient:"$COLOR" "$DIR/$NAME"
    show_preview
    prompt_set_wallpaper
}

generate_twisted() {
    local twist
    
    if [[ "$RANDOMIZE" == true ]]; then
        COLOR="$(random_color)-$(random_color)"
        twist=$(random_number 500)
    else
        get_colors
        read -rp "${COLORS[ORANGE]}Twist amount (0-500, default 150): ${COLORS[BLUE]}" twist
        echo -e "${COLORS[RESET]}"
    fi
    
    echo -e "${COLORS[CYAN]}Generating twisted gradient...${COLORS[RESET]}"
    convert -size "$SIZE" gradient:"$COLOR" -swirl "${twist:-150}" "$DIR/$NAME"
    show_preview
    prompt_set_wallpaper
}

generate_bilinear() {
    local smooth
    
    if [[ "$RANDOMIZE" == true ]]; then
        COLOR1=$(random_color)
        COLOR2=$(random_color)
        COLOR3=$(random_color)
        COLOR4=$(random_color)
        [[ $((RANDOM % 2)) -eq 0 ]] && smooth=true || smooth=false
    else
        get_colors
        read -rp "${COLORS[ORANGE]}Smooth or regular? (s/r): ${COLORS[BLUE]}" answer
        [[ $answer =~ ^[Ss]$ ]] && smooth=true || smooth=false
        echo -e "${COLORS[RESET]}"
    fi
    
    echo -e "${COLORS[CYAN]}Generating bilinear gradient...${COLORS[RESET]}"
    if [[ "$smooth" == true ]]; then
        convert \( xc:"$COLOR1" xc:"$COLOR2" +append \) \
                \( xc:"$COLOR3" xc:"$COLOR4" +append \) -append \
                -size "$SIZE" xc: +swap -fx 'v.p{i/(w-1),j/(h-1)}' "$DIR/$NAME"
    else
        convert \( xc:"$COLOR1" xc:"$COLOR2" +append \) \
                \( xc:"$COLOR3" xc:"$COLOR4" +append \) -append \
                -filter triangle -resize "$SIZE"\! "$DIR/$NAME"
    fi
    show_preview
    prompt_set_wallpaper
}

generate_plasma() {
    local type twist
    
    if [[ "$RANDOMIZE" == true ]]; then
        type=$((RANDOM % 3))
        [[ $type -eq 1 ]] && twist=$(random_number 500)
        [[ $type -eq 2 ]] && COLOR="$(random_color)-$(random_color)"
    else
        read -rp "${COLORS[ORANGE]}Type? [(r)andom/(t)wisted/(c)ustom]: ${COLORS[BLUE]}" answer
        echo -e "${COLORS[RESET]}"
        case "$answer" in
            t|T) type=1; read -rp "${COLORS[ORANGE]}Twist (0-500): ${COLORS[BLUE]}" twist; echo -e "${COLORS[RESET]}" ;;
            c|C) type=2; 
                 if [[ -n "$COLOR_ARG" ]]; then
                     COLOR="$COLOR_ARG"
                 else
                     read -rp "${COLORS[ORANGE]}Colors (color1-color2): ${COLORS[GREEN]}" COLOR; echo -e "${COLORS[RESET]}"
                 fi
                 ;;
            *) type=0 ;;
        esac
    fi
    
    echo -e "${COLORS[CYAN]}Generating plasma wallpaper...${COLORS[RESET]}"
    case "$type" in
        0) convert -size "$SIZE" plasma: "$DIR/$NAME" ;;
        1) convert -size "$SIZE" plasma:fractal -swirl "${twist:-150}" "$DIR/$NAME" ;;
        2) convert -size "$SIZE" plasma:"$COLOR" "$DIR/$NAME" ;;
    esac
    show_preview
    prompt_set_wallpaper
}

generate_blurred() {
    local blur
    
    if [[ "$RANDOMIZE" == true ]]; then
        blur=$(random_number 30)
    else
        read -rp "${COLORS[ORANGE]}Blur strength (1-30, default 14): ${COLORS[BLUE]}" blur
        echo -e "${COLORS[RESET]}"
    fi
    
    echo -e "${COLORS[CYAN]}Generating blurred wallpaper...${COLORS[RESET]}"
    local tmp="/tmp/canvas_noise_$$.png"
    convert -size "100x56" xc: +noise Random "$tmp"
    convert "$tmp" -virtual-pixel tile -blur "0x${blur:-14}" \
        -auto-level -resize "$SIZE" "$DIR/$NAME"
    rm -f "$tmp"
    show_preview
    prompt_set_wallpaper
}

generate_random() {
    local types=(generate_solid generate_linear generate_radial generate_twisted 
                 generate_bilinear generate_plasma generate_blurred)
    local choice=$((RANDOM % ${#types[@]}))
    echo -e "${COLORS[MAGENTA]}Randomizing...${COLORS[RESET]}"
    "${types[$choice]}"
}

## Parse arguments
main() {
    check_prerequisites
    
    if [[ $# -eq 0 ]]; then
        usage
        exit 0
    fi
    
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help) usage; exit 0 ;;
            -S|--size) SIZE="$2"; shift ;;
            -s|--solid) SOLID=true ;;
            -l|--linear) GRADIENT=true ;;
            -r|--radial) RGRADIENT=true ;;
            -t|--twisted) TGRADIENT=true ;;
            -b|--bilinear) BGRADIENT=true ;;
            -p|--plasma) PLASMA=true ;;
            -B|--blurred) NOISE=true ;;
            -n|--no-preview) NOFEH=true ;;
            -a|--autobg) AUTOBG=true; NOFEH=true ;;
            -R|--randomize) RANDOMIZE=true ;;
            -c|--colors) COLOR_ARG="$2"; shift ;;
            *) echo "Unknown option: $1"; usage; exit 1 ;;
        esac
        shift
    done
    
    # Execute based on flags
    if [[ "$SOLID" == true ]]; then
        generate_solid
    elif [[ "$GRADIENT" == true ]]; then
        generate_linear
    elif [[ "$RGRADIENT" == true ]]; then
        generate_radial
    elif [[ "$TGRADIENT" == true ]]; then
        generate_twisted
    elif [[ "$BGRADIENT" == true ]]; then
        generate_bilinear
    elif [[ "$PLASMA" == true ]]; then
        generate_plasma
    elif [[ "$NOISE" == true ]]; then
        generate_blurred
    elif [[ "$RANDOMIZE" == true ]]; then
        generate_random
    else
        usage
    fi
    
    echo -e "${COLORS[GREEN]}✓ Saved to: $DIR/$NAME${COLORS[RESET]}"
}

main "$@"
